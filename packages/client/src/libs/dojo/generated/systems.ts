/* Autogenerated file. Do not edit manually. */

import { type DojoProvider } from "@dojoengine/core";
import { toast } from "sonner";
import { type Account, type AccountInterface } from "starknet";
import { ZERO_ADDRESS, NAMESPACE } from "@/constants";
import { handleTransactionError } from "@/utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export type PixelUpdate = {
  x: number;
  y: number;
  color: number;
  owner?: `0x${string}`;
  app?: `0x${string}`;
  text?: string;
  timestamp?: number;
  action?: `0x${string}`;
};

export type DefaultParams = {
  // forPlayer: `0x${string}`;
  // forSystem: `0x${string}`;
  x: number;
  y: number;
  color: number;
};

export interface UpdatePixelProps {
  account: Account | AccountInterface;
  forPlayer: `0x${string}`;
  forSystem: `0x${string}`;
  pixelUpdate: PixelUpdate;
}

const handleError = (action: string, error: unknown) => {
  console.error(`Error executing ${action}:`, error);
  const errorMessage = handleTransactionError(error);
  console.info(errorMessage);
  toast.error(errorMessage);
  throw error;
};

export async function setupWorld(provider: DojoProvider) {
  const actions = () => ({
    // ======= Core =======
    initCore: async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: "actions",
            entrypoint: "init",
            calldata: [],
          },
          NAMESPACE
        );
      } catch (error) {
        handleError("initCore", error);
      }
    },

    updatePixel: async (account: Account | AccountInterface, pixelUpdate: PixelUpdate) => {
      console.log("updatePixel", pixelUpdate);
      try {
        return await provider.execute(
          account,
          {
            contractName: "actions",
            entrypoint: "update_pixel",
            calldata: [ZERO_ADDRESS, ZERO_ADDRESS, pixelUpdate],
          },
          NAMESPACE
        );
      } catch (error) {
        handleError("updatePixel", error);
      }
    },
    // ======= Paint =======
    initPaint: async (account: Account | AccountInterface) => {
      console.log("initPaint");
      try {
        return await provider.execute(
          account,
          {
            contractName: "paint_actions",
            entrypoint: "init",
            calldata: [],
          },
          NAMESPACE
        );
      } catch (error) {
        handleError("initPaint", error);
      }
    },
    interact: async (account: Account | AccountInterface, params: DefaultParams) => {
      console.log("interact", params);
      try {
        return await provider.execute(
          account,
          {
            contractName: "paint_actions",
            entrypoint: "interact",
            calldata: [{ forPlayer: ZERO_ADDRESS, forSystem: ZERO_ADDRESS, ...params }],
          },
          NAMESPACE
        );
      } catch (error) {
        handleError("putColor", error);
      }
    },
  });

  return { actions: actions() };
}
