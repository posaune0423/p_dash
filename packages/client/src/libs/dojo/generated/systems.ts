/* Autogenerated file. Do not edit manually. */

import { type DojoProvider } from '@dojoengine/core'
import { toast } from 'sonner'
import { type Account, type AccountInterface } from 'starknet'
import { ZERO_ADDRESS, NAMESPACE } from '@/constants'
import { BlockType, type Block } from '@/types'
import { blockTypeToIndex, getBlockColor, handleTransactionError } from '@/utils'

export type IWorld = Awaited<ReturnType<typeof setupWorld>>

const handleError = (action: string, error: unknown) => {
  console.error(`Error executing ${action}:`, error)
  const errorMessage = handleTransactionError(error)
  console.info(errorMessage)
  toast.error(errorMessage)
  throw error
}

export async function setupWorld(provider: DojoProvider) {
  const actions = () => ({
    initializeStage: async (
      account: Account | AccountInterface,
      stageId: string,
      x: number,
      y: number,
      width: number,
      height: number,
    ) => {
      console.log('initializeStage')
      try {
        const { transaction_hash } = await provider.execute(
          account,
          {
            contractName: 'p_dash_actions',
            entrypoint: 'initialize_stage',
            calldata: [
              stageId,
              x,
              y,
              width,
              height,
              account.address,
              ZERO_ADDRESS,
              x,
              y,
              getBlockColor(BlockType.InitBlock),
            ],
          },
          NAMESPACE,
        )
        const receipt = await account.waitForTransaction(transaction_hash)
        console.log('receipt', receipt)
      } catch (error) {
        handleError('initializeStage', error)
        throw error
      }
    },
    batchPutBlocks: async (
      account: Account | AccountInterface,
      stageId: string,
      blocks: Block[],
    ) => {
      const calls = blocks.map((block) => {
        return {
          contractName: 'p_dash_actions',
          entrypoint: 'put_block',
          calldata: [
            stageId,
            blockTypeToIndex(block.type),
            account.address,
            ZERO_ADDRESS,
            block.x,
            block.y,
            getBlockColor(block.type),
          ],
        }
      })

      console.log('calls', calls)

      try {
        // multi call
        const { transaction_hash } = await provider.execute(account, calls, NAMESPACE)
        console.log(transaction_hash)
      } catch (error) {
        handleError('batchPutBlocks', error)
        throw error
      }
    },
  })

  return { actions: actions() }
}
