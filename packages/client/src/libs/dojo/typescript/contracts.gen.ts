// Generated by dojo-bindgen on Wed, 25 Sep 2024 17:52:58 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { type DojoProvider } from '@dojoengine/core'
import { type Account } from 'starknet'
import type * as models from './models.gen'
import { ZERO_ADDRESS } from '@/constants'
import { blockTypeToIndex, getBlockColor, hexRGBAtoNumber } from '@/utils'

export type IWorld = Awaited<ReturnType<typeof setupWorld>>

export async function setupWorld(provider: DojoProvider) {
  // System definitions for `pixelaw-actions` contract
  function actions() {
    const contract_name = 'actions'

    // Call the `init` system with the specified Account and calldata
    const init = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'init',
            calldata: [],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing init:', error)
        throw error
      }
    }

    // Call the `update_permission` system with the specified Account and calldata
    const update_permission = async (props: {
      account: Account
      app_key: bigint
      permission: models.Permission
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'update_permission',
            calldata: [
              props.app_key,
              props.permission.app,
              props.permission.color,
              props.permission.owner,
              props.permission.text,
              props.permission.timestamp,
              props.permission.action,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing update_permission:', error)
        throw error
      }
    }

    // Call the `has_write_access` system with the specified Account and calldata
    const has_write_access = async (props: {
      account: Account
      for_player: bigint
      for_system: bigint
      pixel: models.Pixel
      pixel_update: models.PixelUpdate
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'has_write_access',
            calldata: [
              props.for_player,
              props.for_system,
              props.pixel.x,
              props.pixel.y,
              props.pixel.app,
              props.pixel.color,
              props.pixel.created_at,
              props.pixel.updated_at,
              props.pixel.timestamp,
              props.pixel.owner,
              props.pixel.text,
              props.pixel.action,
              props.pixel_update,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing has_write_access:', error)
        throw error
      }
    }

    // Call the `process_queue` system with the specified Account and calldata
    const process_queue = async (props: {
      account: Account
      id: bigint
      timestamp: number
      called_system: bigint
      selector: bigint
      calldata: bigint[]
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'process_queue',
            calldata: [
              props.id,
              props.timestamp,
              props.called_system,
              props.selector,
              ...props.calldata,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing process_queue:', error)
        throw error
      }
    }

    // Call the `schedule_queue` system with the specified Account and calldata
    const schedule_queue = async (props: {
      account: Account
      timestamp: number
      called_system: bigint
      selector: bigint
      calldata: bigint[]
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'schedule_queue',
            calldata: [props.timestamp, props.called_system, props.selector, ...props.calldata],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing schedule_queue:', error)
        throw error
      }
    }

    // Call the `update_pixel` system with the specified Account and calldata
    const update_pixel = async (props: {
      account: Account
      for_player: bigint
      for_system: bigint
      pixel_update: models.PixelUpdate
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'update_pixel',
            calldata: [props.for_player, props.for_system, props.pixel_update],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing update_pixel:', error)
        throw error
      }
    }

    // Call the `new_app` system with the specified Account and calldata
    const new_app = async (props: {
      account: Account
      system: bigint
      name: bigint
      icon: bigint
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'new_app',
            calldata: [props.system, props.name, props.icon],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing new_app:', error)
        throw error
      }
    }

    // Call the `get_system_address` system with the specified Account and calldata
    const get_system_address = async (props: { account: Account; for_system: bigint }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'get_system_address',
            calldata: [props.for_system],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing get_system_address:', error)
        throw error
      }
    }

    // Call the `get_player_address` system with the specified Account and calldata
    const get_player_address = async (props: { account: Account; for_player: bigint }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'get_player_address',
            calldata: [props.for_player],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing get_player_address:', error)
        throw error
      }
    }

    // Call the `alert_player` system with the specified Account and calldata
    const alert_player = async (props: {
      account: Account
      position: models.Position
      player: bigint
      message: bigint
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'alert_player',
            calldata: [props.position, props.player, props.message],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing alert_player:', error)
        throw error
      }
    }

    // Call the `set_instruction` system with the specified Account and calldata
    const set_instruction = async (props: {
      account: Account
      selector: bigint
      instruction: bigint
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'set_instruction',
            calldata: [props.selector, props.instruction],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing set_instruction:', error)
        throw error
      }
    }

    // Call the `world` system with the specified Account and calldata
    const world = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'world',
            calldata: [],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing world:', error)
        throw error
      }
    }

    return {
      init,
      update_permission,
      has_write_access,
      process_queue,
      schedule_queue,
      update_pixel,
      new_app,
      get_system_address,
      get_player_address,
      alert_player,
      set_instruction,
      world,
    }
  }

  // System definitions for `pixelaw-p_dash_actions` contract
  function p_dash_actions() {
    const contract_name = 'p_dash_actions'

    // Call the `init` system with the specified Account and calldata
    const init = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'init',
            calldata: [],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing init:', error)
        throw error
      }
    }

    // Call the `initialize_stage` system with the specified Account and calldata
    const initialize_stage = async (props: {
      account: Account
      stage_id: string
      start_x: number
      start_y: number
      width: number
      height: number
      default_params: models.DefaultParameters
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'initialize_stage',
            calldata: [
              props.stage_id,
              props.start_x,
              props.start_y,
              props.width,
              props.height,
              props.default_params,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing initialize_stage:', error)
        throw error
      }
    }

    // Call the `put_block` system with the specified Account and calldata
    const put_block = async (props: {
      account: Account
      stage_id: string
      blocktype: models.BlockType
      default_params: models.DefaultParameters
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'put_block',
            calldata: [
              props.stage_id,
              blockTypeToIndex(props.blocktype),
              props.default_params,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing put_block:', error)
        throw error
      }
    }

    const batch_put_blocks = async (account: Account, stageId: string, blocks: models.Block[]) => {
      const calls = blocks.map((block) => {
        return {
          contractName: 'p_dash_actions',
          entrypoint: 'put_block',
          calldata: [
            stageId,
            blockTypeToIndex(block.blocktype),
            account.address,
            ZERO_ADDRESS,
            block.x,
            block.y,
            hexRGBAtoNumber(getBlockColor(block.blocktype)),
          ],
        }
      })

      try {
        // multi call
        return await provider.execute(account, calls, 'pixelaw')
      } catch (error) {
        console.error('Error executing batchPutBlocks:', error)
        throw error
      }
    }

    // Call the `on_pre_update` system with the specified Account and calldata
    const on_pre_update = async (props: {
      account: Account
      pixel_update: models.PixelUpdate
      app_caller: models.App
      player_caller: bigint
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'on_pre_update',
            calldata: [
              props.pixel_update,
              props.app_caller.system,
              props.app_caller.name,
              props.app_caller.icon,
              props.app_caller.action,
              props.player_caller,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing on_pre_update:', error)
        throw error
      }
    }

    // Call the `on_post_update` system with the specified Account and calldata
    const on_post_update = async (props: {
      account: Account
      pixel_update: models.PixelUpdate
      app_caller: models.App
      player_caller: bigint
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'on_post_update',
            calldata: [
              props.pixel_update,
              props.app_caller.system,
              props.app_caller.name,
              props.app_caller.icon,
              props.app_caller.action,
              props.player_caller,
            ],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing on_post_update:', error)
        throw error
      }
    }

    // Call the `world` system with the specified Account and calldata
    const world = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: 'world',
            calldata: [],
          },
          'pixelaw',
        )
      } catch (error) {
        console.error('Error executing world:', error)
        throw error
      }
    }

    return {
      init,
      initialize_stage,
      put_block,
      batch_put_blocks,
      on_pre_update,
      on_post_update,
      world,
    }
  }

  return {
    actions: actions(),
    p_dash_actions: p_dash_actions(),
  }
}
