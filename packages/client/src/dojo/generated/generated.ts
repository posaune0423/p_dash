/* Autogenerated file. Do not edit manually. */

import { type DojoProvider } from '@dojoengine/core'
import { type Account, type AccountInterface } from 'starknet'
import { ZERO_ADDRESS, NAMESPACE } from '@/constants'

export type IWorld = Awaited<ReturnType<typeof setupWorld>>

export type PixelUpdate = {
  x: number
  y: number
  color: number
  owner?: `0x${string}`
  app?: `0x${string}`
  text?: string
  timestamp?: number
  action?: `0x${string}`
}

export interface UpdatePixelProps {
  account: Account | AccountInterface
  forPlayer: `0x${string}`
  forSystem: `0x${string}`
  pixelUpdate: PixelUpdate
}

const handleError = (action: string, error: unknown) => {
  console.error(`Error executing ${action}:`, error)
  throw error
}

export async function setupWorld(provider: DojoProvider) {
  const actions = () => ({
    init: async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: 'actions',
            entrypoint: 'init',
            calldata: [],
          },
          NAMESPACE,
        )
      } catch (error) {
        handleError('init', error)
      }
    },

    updatePixel: async (account: Account | AccountInterface, pixelUpdate: PixelUpdate) => {
      console.log(account)
      try {
        return await provider.execute(
          account,
          {
            contractName: 'actions',
            entrypoint: 'update_pixel',
            calldata: [
              ZERO_ADDRESS, // NOTE: Why can we pass ZERO_ADDRESS for both player and system?
              ZERO_ADDRESS,
              { x: pixelUpdate.x, y: pixelUpdate.y },
              pixelUpdate?.color,
              // pixelUpdate?.owner,
              // pixelUpdate?.app,
              // pixelUpdate?.text,
              // pixelUpdate?.timestamp,
              // pixelUpdate?.action,
            ],
          },
          NAMESPACE,
        )
      } catch (error) {
        handleError('updatePixel', error)
      }
    },

    interact: async (account: Account | AccountInterface, pixelUpdate: PixelUpdate) => {
      console.log(account)
      try {
        return await provider.execute(
          account,
          {
            contractName: 'p_dash_actions',
            entrypoint: 'interact',
            calldata: [
              ZERO_ADDRESS, // NOTE: Why can we pass ZERO_ADDRESS for both player and system?
              ZERO_ADDRESS,
              { x: pixelUpdate.x, y: pixelUpdate.y },
              pixelUpdate?.color,
              // pixelUpdate?.owner,
              // pixelUpdate?.app,
              // pixelUpdate?.text,
              // pixelUpdate?.timestamp,
              // pixelUpdate?.action,
            ],
          },
          NAMESPACE,
        )
      } catch (error) {
        handleError('interact', error)
      }
    },
  })

  return { actions: actions() }
}
