/* Autogenerated file. Do not edit manually. */

import { AccountInterface, BigNumberish } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { NAMESPACE, PROPOSAL_CONTRACT_ADDRESS, VOTING_CONTRACT_ADDRESS } from "@/global/constants";
import { ProposalArgs, ProposalType } from "@/global/types";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const interact = async ({
            account,
            contract_name,
            call,
            calldata,
        }: {
            account: AccountInterface;
            contract_name: string;
            call: string;
            calldata: BigNumberish[];
        }) => {
            try {
                return await provider.execute(
                    account,
                    {
                        contractName: contract_name,
                        entrypoint: call,
                        calldata,
                    },
                    NAMESPACE
                );
            } catch (error) {
                console.error("Error executing interact:", error);
                throw error;
            }
        };

        const vote = async ({
            account,
            gameId,
            index,
            usePx,
            isInFavor,
        }: {
            account: AccountInterface;
            gameId: number;
            index: number;
            usePx: number;
            isInFavor: boolean;
        }) => {
            try {
                return await provider.execute(
                    account,
                    {
                        contractName: VOTING_CONTRACT_ADDRESS,
                        entrypoint: "vote",
                        calldata: [gameId, index, usePx, isInFavor],
                    },
                    NAMESPACE
                );
            } catch (e) {
                console.error("Error executing voting:", e);
                throw e;
            }
        };

        const createProposal = async ({
            account,
            gameId,
            proposalType,
            args,
        }: {
            account: AccountInterface;
            gameId: number;
            proposalType: ProposalType;
            args: ProposalArgs;
        }) => {
            try {
                return await provider.execute(
                    account,
                    {
                        contractAddress: PROPOSAL_CONTRACT_ADDRESS,
                        entrypoint: "create_proposal",
                        calldata: [gameId, proposalType, args.address, args.arg1, args.arg2],
                    },
                    NAMESPACE
                );
            } catch (e) {
                console.error("Error executing createProposal:", e);
                throw e;
            }
        };

        return { interact, vote, createProposal };
    }
    return {
        actions: actions(),
    };
}
